#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        CALL    #config
        CALL    #alterna
  
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)

//--------------------------------END MAIN--------------------------------------


//------------------------------uC configuration--------------------------------
 config:
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        BIC.B   #BIT3, &P1DIR           ; Direção da P1.3 como entrada
        BIS.B   #BIT3, &P1REN           ; Habilitar Pull up/down para P1.3
        BIS.B   #BIT3, &P1OUT           ; Habilita o Pull up para P1.3
        
        BIS.B   #BIT0 + BIT6, &P1DIR    ; Direção de P1.0 e P1.6 como saída

        RET                             ; Retorna para main
//------------------------------ALTERNA-----------------------------------------
  alterna:         BIT.B   #BIT3, &P1IN              ; Testa se o P1.3 está pressionado
                   JZ      pressionado               ; Pula para rotina "pressionado se o botão for presisonado
                   BIC.B   #BIT0, &P1OUT             ; Apaga LED vermelho com botão não pressionado
                   BIS.B   #BIT6, &P1OUT             ; Acende LED verde com botão não pressionado
                   JMP     alterna
                   
  pressionado:     BIS.B   #BIT0, &P1OUT
                   BIC.B   #BIT6, &P1OUT
                   JMP     alterna
   
   
   
END
        
