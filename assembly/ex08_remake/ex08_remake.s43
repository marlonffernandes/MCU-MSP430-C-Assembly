#include "msp430.h"                     ; #define controlled include file
        
        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
        
        ASEG    0xFFE4                  ; seta vetor de interrupção para o label interrupcao_P1
        DC16    interrupcao_P1 
        
        ORG     0xFFFA                  ; seta vetor de interrupção para o label interrupcao_TA1
        DC16    interrupcao_TA1

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        CALL    #config_uc
        CALL    #config_interruptP1
        CALL    #config_interruptTA1
        BIC.B   #BIT0 + BIT6, &P1OUT    ; Apaga os LEDs
        eint                            ; Enable General Interrupts              
  
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)

//--------------------------------END MAIN--------------------------------------


//------------------------------uC configuration--------------------------------
 config_uc:
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        BIC.B   #BIT3, &P1DIR           ; Direção da P1.3 como entrada
        BIS.B   #BIT3, &P1REN           ; Habilitar Pull up/down para P1.3
        BIS.B   #BIT3, &P1OUT           ; Habilita o Pull up para P1.3
        
        BIS.B   #BIT0 + BIT6, &P1DIR    ; Direção de P1.0 e P1.6 como saída
        
        RET                             ; Retorna para main

//------------------------------interruptP1 configuration-----------------------
config_interruptP1:
        BIS.B #BIT3, &P1IE        ; Habilita interrupção em P1.3
        BIS.B #BIT3, &P1IES       ; Interrupção ativada na borda negativa em P1.3
        BIC.B #BIT3, &P1IFG       ; Limpa a flag de interrupção
       

        RET                      ; Retorna para main
 
 
//--------------------------------interruptTA1 configuration--------------------
config_interruptTA1:                   ; Configura Timer no registrador TA1CTL com MC_0 (parado), div 4, SMCLK (submainclk)                        
        BIS.W  #TASSEL_2, &TA1CTL      ; Seta SMCLK
        BIS.W  #ID_2, &TA1CTL          ; Seta divisor de 4 (div)
        BIS.W  #MC_0, &TA1CTL          ; Seta o contador em modo Stop mode
        BIS.W  #CCIE, &TA1CCTL0        ; Habilita interrupcao especifica no registrador TA1CCTL0
        MOV.W  #62500, &TA1CCR0        ; Move o valor a ser incrimentado, 250ms = 4us (div) * N, passando 250ms para us, temos que N = 62500
        RET
 
//------------------------------interrupcao_P1----------------------------------
interrupcao_P1:    
        XOR.W   #BIT4, &TA1CTL          ; Altera estado do BIT4 (MCx)
        BIT.W   #BIT4, &TA1CTL          ; Testa o estado do BIT4 (MCx)
        JZ      apaga                   ; Se o timer estiver em modo Stop mode, pula para apaga
        BIS.B   #BIT0, &P1OUT           ; Se timer estiver em modo Up mode, acende um dos LEDs (vermelho)
        BIC.B   #BIT3, &P1IFG           ; Limpa a flag de interrupção_P1
        RETi                            ; Sai da interrupção

apaga:           
        BIC.B   #BIT0 + BIT6, &P1OUT    ; Apaga LEDs     
        BIC.B   #BIT3, &P1IFG           ; Limpa a flag de interrupção_P1
        RETi                            ; Sai da interrupção
        
//------------------------------interrupcao_TA1----------------------------------
interrupcao_TA1:    XOR.B #BIT0 + BIT6, &P1OUT          ;inverte LEDs
                    RETi
                    
                    
                    
        END