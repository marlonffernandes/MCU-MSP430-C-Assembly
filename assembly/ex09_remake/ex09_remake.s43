#include "msp430.h"                     ; #define controlled include file
        
        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
        
        ORG     0xFFF2                  ; seta vetor de interrupção para o label interrupcao_TA0
        DC16    interrupcao_TA0

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        CALL    #config_uc
        BIC.B   #BIT0, &P1OUT           ; Configura LED vermelho inicialmente apagado
        BIS.B   #BIT6, &P1OUT           ; Configura LED verde inicialmente aceso
        CALL    #config_interruptTA0
        eint                            ; Enable General Interrupts              
  
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)

//--------------------------------END MAIN--------------------------------------


//------------------------------uC configuration--------------------------------
 config_uc:
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
      
        MOV.B   &CALDCO_1MHZ, &DCOCTL   ; Configura clock de 1MHz
        MOV.B   &CALBC1_1MHZ, &BCSCTL1
      
        BIS.B   #BIT0 + BIT6, &P1DIR    ; Direção de P1.0 e P1.6 como saída

        RET                             ; Retorna para main
 
//--------------------------------interruptTA0 configuration--------------------
config_interruptTA0:                   ; Configura Timer no registrador TA0CTL com MC_1 (Up mode), div 8, SMCLK (submainclk)                        
        BIS.W  #TASSEL_2, &TA0CTL      ; Seta SMCLK
        BIS.W  #ID_3, &TA0CTL          ; Seta divisor de 8 (div)
        BIS.W  #MC_1, &TA0CTL          ; Seta o contador em modo Up mode
        BIS.W  #CCIE, &TA0CCTL0        ; Habilita interrupcao especifica no registrador TA0CCTL0
        MOV.W  #62500, &TA0CCR0        ; Move o valor a ser incrimentado, 250ms = 4us (div) * N, passando 250ms para us, temos que N = 62500
        RET
 

//------------------------------interrupcao_TA0----------------------------------
interrupcao_TA0:    XOR.B #BIT0 + BIT6, &P1OUT          ;inverte LEDs
                    RETi
                    
                    
                    
        END