#include "msp430.h"                     ; #define controlled include file
        
        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
        
        ASEG    0xFFE4                  ; seta vetor de interrupção para o label interrupcao_P1
        DC16    interrupcao_P1 

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        CALL    #config_uc
        CALL    #config_interruptP1
        BIC.B   #BIT0 + BIT6, &P1OUT    ; Apaga os LEDs
        eint                            ; Enable General Interrupts              
  
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)

        ; Ou podemos utilizar ao invés de JMP $ o comando BIS.W # LPM4 +GIE, SR (low power mode)
        ; Durante a interrupção o uC está em modo ativo total
        ; Após ou antes de uma interrupção o uC está em low power mode
//--------------------------------END MAIN--------------------------------------


//------------------------------uC configuration--------------------------------
 config_uc:
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        BIC.B   #BIT3, &P1DIR           ; Direção da P1.3 como entrada
        BIS.B   #BIT3, &P1REN           ; Habilitar Pull up/down para P1.3
        BIS.B   #BIT3, &P1OUT           ; Habilita o Pull up para P1.3
        
        BIS.B   #BIT0 + BIT6, &P1DIR    ; Direção de P1.0 e P1.6 como saída
        
        RET                             ; Retorna para main

//------------------------------interruptP1 configuration-----------------------
config_interruptP1:
        BIS.B #BIT3, &P1IE        ; Habilita interrupção em P1.3
        BIS.B #BIT3, &P1IES       ; Interrupção ativada na borda negativa em P1.3
        BIC.B #BIT3, &P1IFG       ; Limpa a flag de interrupção
       

        RET                      ; Retorna para main
 
//------------------------------interrupcao_P1----------------------------------
interrupcao_P1:    BIT.B   #BIT3, &P1IN            ; Testa se o P1.3 está pressionado
                   JNZ     apaga                   ; Se não estiverem apagados, ou seja, acesos, pula para apaga
                   BIS.B   #BIT0 + BIT6, &P1OUT    ; Se estiverem apagados, acende LEDs
                   XOR.B   #BIT3, &P1IES           ; Altera o sentido da borda de Interrupção em P1.3
                   BIC.B   #BIT3, &P1IFG           ; Limpa a flag de interrupção
                   RETi                            ; Sai da interrupção

apaga:             BIC.B   #BIT0 + BIT6, &P1OUT    ; Apaga LEDs     
                   XOR.B   #BIT3, &P1IES           ; Altera o sentido da borda de Interrupção em P1.3
                   BIC.B   #BIT3, &P1IFG           ; Limpa a flag de interrupção
                   RETi                            ; Sai da interrupção
                    
                    
        END