#include "msp430.h"                     ; #define controlled include file
        
        #define CONTADOR R12            ; define o R12 com o nome contador

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        CALL    #config
        MOV.W   #1, R12                 ; Move 1 para P13_ant como R12
        BIC.B   #BIT0 + BIT6, &P1OUT    ; Apaga os LEDs
        CALL    #verifica
  
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)

//--------------------------------END MAIN--------------------------------------


//------------------------------uC configuration--------------------------------
 config:
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        BIC.B   #BIT3, &P1DIR           ; Direção da P1.3 como entrada
        BIS.B   #BIT3, &P1REN           ; Habilitar Pull up/down para P1.3
        BIS.B   #BIT3, &P1OUT           ; Habilita o Pull up para P1.3
        
        BIS.B   #BIT0 + BIT6, &P1DIR    ; Direção de P1.0 e P1.6 como saída
        

        RET                             ; Retorna para main
//------------------------------VERIFICA----------------------------------------
 verifica:         BIT.B   #BIT3, &P1IN              ; Testa se o P1.3 está pressionado
                   JZ      pressionado               ; Pula para rotina "pressionado" se o botão for presisonado
                   MOV.W   #1, R12                   ; Move 1 para P13_ant como R12  
 confirma:         BIT.B   #BIT0 + BIT6, &P1OUT      ; LEDs apagados?
                   JZ      verifica
                   JMP     alterna                   ; Alterna LEDs


 pressionado:      BIT.B   #1,R12
                   JNZ     final     
                   JMP     confirma       
   

        
 final:           MOV.W    #0,R12
                  BIT.B    #BIT0 + BIT6, &P1OUT      ; LEDs apagados?
                  JZ       vermelho
                  CALL     #apaga
  
 vermelho:       BIS.B     #BIT0, &P1OUT
                 JMP       confirma
 
 
 
 
 apaga:          BIC.B   #BIT0 + BIT6, &P1OUT    ; Apaga os LEDs
                 JMP     confirma
        
//------------------------------ALTERNA-----------------------------------------
  alterna:         XOR.B   #BIT0 + BIT6, &P1OUT
                   CALL    #delay  
//-----------------------------DELAY--------------------------------------------                   
  delay:           PUSH    CONTADOR
                   MOV.W   #0xF420, CONTADOR
  ciclos:          NOP
                   DEC.W   CONTADOR
                   JNZ     ciclos
                   POP.W   CONTADOR
                   JMP     verifica
                   
                   END