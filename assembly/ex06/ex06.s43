/*-----------------------------------------------------------------------
Programa que alterna  o estado dos LEDs vermelho e verde a cada ocorrência de borda de descida no sinal do Botão S2 alterando o estado dos LEDs entre apagado e piscante. - EXERCÍCIO 06

Autor: Marlon Ferraz Fernandes
------------------------------------------------------------------------*/

#include "msp430.h"                     ; #define controlled include file

#define CONTADOR R12

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
        
        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        MOV.B   #1, R12                 // P1.3 anterior
        BIS.B   #BIT0+BIT6, &P1DIR      // p1.0, p1.6 output
        
        BIC.B   #BIT0, &P1OUT 
        BIC.B   #BIT6, &P1OUT
        
        BIC.B   #BIT3, &P1DIR           // p1.3 input
        BIS.B   #BIT3, &P1REN           // pull-up ou pulldown on
        BIS.B   #BIT3, P1OUT            // pull-up
        
         // A:
A:       BIT.B   #BIT3, &P1IN            
         JZ      s2press
         MOV.B   #1, R12

rets2:  BIT.B   #BIT0+BIT6, &P1IN           // LEDs apagados?
        JZ      A                           // Sim
        CALL    #alterna                    // Nao
        JMP     A
        
s2press: CMP.B  #1, R12
         JNZ    rets2
         
         MOV.B  #0, R12
         
         BIT.B   #BIT0+BIT6, &P1IN           // LEDs apagados?
         JZ      ledsapagados
         BIC.B   #BIT0+BIT6, &P1OUT          // apaga LEDs
         JMP     rets2
         
ledsapagados: BIS.B #BIT0, &P1OUT            //acende LED vermelho
              JMP   rets2
           
alterna: XOR.B  #BIT0+BIT6, &P1OUT            
         CALL   #temp 
         RET

temp:	 PUSH.W CONTADOR           
         MOV.W  #0xF420, CONTADOR         ; 249984 / 4 ciclos = 62496 = 0xF420
ciclos:  NOP
         DEC.W  CONTADOR
         JNZ    ciclos
         POP    CONTADOR
         RET
                 
         END
